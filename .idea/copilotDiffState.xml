<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ERP Simplificado — Backend (Java + Spring Boot)&#10;&#10;Projeto de estudo para desenvolvimento de um **Sistema ERP Simplificado**, com foco em gestão de clientes, produtos, estoque e pedidos.&#10;&#10;Projeto FRONT do ERP — **[EM BREVE]**&#10;&#10;## ‍ Tecnologias Utilizadas&#10;- Java 21+&#10;- Spring Boot ( 3.5.4 )&#10;- Spring Data JPA (Hibernate)&#10;- Spring Security (JWT)&#10;- PostgreSQL&#10;- Lombok&#10;- Mapstruct&#10;- Liquibase (Migrations)&#10;- Docker&#10;- JUnit 5 + Mockito (Testes)&#10;- Swagger / OpenAPI 3.0&#10;&#10;##  Funcionalidades do Projeto&#10;- Cadastro de Clientes&#10;- Cadastro de Produtos&#10;- Controle de Estoque&#10;- Emissão de Pedidos/Vendas&#10;- Relatórios Simples (PDF ou Excel)&#10;- Autenticação e Autorização de Usuários (Role-based)&#10;&#10;##  Roadmap (Tasks)&#10;### ️ Estrutura Inicial&#10;- [ ] Configurar projeto Spring Boot (Gradle)&#10;- [ ] Docker para base de dados teste &#10;- [ ] Configurar conexão com banco de dados (application.yml e application-dev.yml)&#10;- [ ] Configurar Lombok e Flyway&#10;- [ ] Estruturar pacotes do projeto (Controller, Service, Repository, Model, DTO)&#10;&#10;### ️ Módulo: Clientes&#10;- [ ] Criar entidade Cliente (Model)&#10;- [ ] Criar Repository Cliente (JpaRepository)&#10;- [ ] Criar Service Cliente (CRUD)&#10;- [ ] Criar Controller Cliente (API REST)&#10;- [ ] Implementar validações (Bean Validation)&#10;- [ ] Testes unitários (Service/Repository)&#10;&#10;### ️ Módulo: Produtos&#10;- [ ] Criar entidade Produto (Model)&#10;- [ ] Criar Repository Produto (JpaRepository)&#10;- [ ] Criar Service Produto (CRUD)&#10;- [ ] Criar Controller Produto (API REST)&#10;- [ ] Testes unitários (Service/Repository)&#10;&#10;###  Módulo: Estoque&#10;- [ ] Relacionar Produto com Estoque (OneToOne ou Embutido)&#10;- [ ] Criar operações de Entrada/Saída de Estoque&#10;- [ ] API para consulta de saldo de estoque&#10;&#10;###  Módulo: Pedidos/Vendas&#10;- [ ] Criar entidade Pedido e ItemPedido&#10;- [ ] Implementar lógica de geração de Pedido (relacionar Cliente + Itens)&#10;- [ ] Atualizar Estoque ao concluir Pedido&#10;- [ ] API de Listagem e Consulta de Pedidos&#10;&#10;###  Segurança (Auth)&#10;- [ ] Configurar Spring Security (JWT)&#10;- [ ] Criar roles de acesso (ADMIN, USER)&#10;- [ ] API de login/logout&#10;&#10;###  Relatórios&#10;- [ ] Gerar relatório simples em PDF (Ex: Vendas por Período)&#10;- [ ] Exportar dados em Excel (opcional)&#10;&#10;###  Testes&#10;- [ ] Testes unitários (Service, Repository)&#10;- [ ] Testes de Integração (Controller)&#10;&#10;###  Deploy &#10;- [ ] Dockerizar aplicação &#10;- [ ] Deploy na minha VPN ( https://ailtonjm.com.br ) usando Actions do Github&#10;&#10;---&#10;&#10;## ️ Boas Práticas de Desenvolvimento (Análise e Aplicação)&#10;Após a implementação das funcionalidades básicas, será realizada uma etapa dedicada à análise crítica do projeto, focada em aplicar as melhores práticas de desenvolvimento Java &amp; Spring Boot.&#10;&#10;### Objetivos:&#10;- Revisar a estrutura de pacotes (Domain-Driven Design Light)&#10;- Garantir separação correta de camadas (Controller, Service, Repository, DTO, Mapper)&#10;- Refatorar códigos duplicados ou mal estruturados&#10;- Implementar princípios SOLID&#10;- Utilizar padrões de projeto (ex: Factory, Strategy, Adapter se fizer sentido)&#10;- Melhorar manutenibilidade e legibilidade do código&#10;- Garantir boas práticas de nomenclatura&#10;- Aplicar boas práticas no versionamento de banco de dados (Flyway)&#10;- Implementar testes de qualidade (unitários/integrados)&#10;- Melhorar tratamento de exceções (GlobalExceptionHandler)&#10;- Configurar um ambiente de logs adequado (Logback/Slf4j)&#10;- Preparar para deploy em ambiente de produção (perfis de ambiente)&#10;&#10;### Tarefas&#10;- [ ] Revisar estrutura de pacotes seguindo uma abordagem orientada ao domínio&#10;- [ ] Aplicar princípios SOLID nas classes Service e Controller&#10;- [ ] Identificar e eliminar código duplicado&#10;- [ ] Implementar padrões de projeto onde aplicável&#10;- [ ] Refatorar DTOs para evitar exposição direta de entidades&#10;- [ ] Criar um Handler Global de Exceções (ControllerAdvice)&#10;- [ ] Configurar perfis de ambiente (dev, prod)&#10;- [ ] Implementar logs de forma estruturada (Slf4j/Logback)&#10;- [ ] Escrever testes de unidade/integrados para fluxos críticos&#10;- [ ] Analisar possíveis otimizações de queries (JPA/Hibernate)&#10;- [ ] Documentar a API com Swagger/OpenAPI 3.0 (anotado e com exemplos)&#10;&#10;&#10;## Estrutura Completa de Pastas&#10;&#10;```markdown&#10;src/&#10; └─ main/&#10;     ├─ java/&#10;     │    └─ com/&#10;     │         └─ projeto/erp/&#10;     │              ├─ cliente/                 # Domínio Cliente&#10;     │              │    ├─ dto/                  # DTOs do Cliente (request/response)&#10;     │              │    │    ├─ ClienteRequestDTO.java&#10;     │              │    │    └─ ClienteResponseDTO.java&#10;     │              │    ├─ mapper/              # Mappers para Cliente&#10;     │              │    │    └─ ClienteMapper.java&#10;     │              │    ├─ Cliente.java         # Entidade Cliente&#10;     │              │    ├─ ClienteRepository.java   # Interface do Repositório&#10;     │              │    ├─ ClienteService.java  # Regras de negócio&#10;     │              │    └─ ClienteController.java  # API REST&#10;     │              │&#10;     │              ├─ produto/                 # Domínio Produto&#10;     │              │    ├─ dto/&#10;     │              │    │    ├─ ProdutoRequestDTO.java&#10;     │              │    │    └─ ProdutoResponseDTO.java&#10;     │              │    ├─ mapper/&#10;     │              │    │    └─ ProdutoMapper.java&#10;     │              │    ├─ Produto.java&#10;     │              │    ├─ ProdutoRepository.java&#10;     │              │    ├─ ProdutoService.java&#10;     │              │    └─ ProdutoController.java&#10;     │              │&#10;     │              ├─ pedido/                  # Domínio Pedido&#10;     │              │    ├─ dto/&#10;     │              │    │    ├─ PedidoRequestDTO.java&#10;     │              │    │    └─ PedidoResponseDTO.java&#10;     │              │    ├─ mapper/&#10;     │              │    │    └─ PedidoMapper.java&#10;     │              │    ├─ Pedido.java&#10;     │              │    ├─ ItemPedido.java&#10;     │              │    ├─ PedidoRepository.java&#10;     │              │    ├─ PedidoService.java&#10;     │              │    └─ PedidoController.java&#10;     │              │&#10;     │              ├─ infrastructure/          # Camada de infraestrutura&#10;     │              │    ├─ persistence/        # Implementação concreta dos repositórios&#10;     │              │    │    ├─ ClienteRepositoryImpl.java&#10;     │              │    │    ├─ ProdutoRepositoryImpl.java&#10;     │              │    │    └─ PedidoRepositoryImpl.java&#10;     │              │    ├─ messaging/          # Integrações com filas, Kafka etc.&#10;     │              │    ├─ external/           # APIs externas, clients REST, SOAP etc.&#10;     │              │    └─ configuration/      # Datasource, cache, configs de infra&#10;     │              │&#10;     │              ├─ common/                  # Código genérico e transversal&#10;     │              │    ├─ exception/          # Exceções customizadas e handlers&#10;     │              │    │    ├─ BusinessException.java&#10;     │              │    │    ├─ ResourceNotFoundException.java&#10;     │              │    │    └─ GlobalExceptionHandler.java&#10;     │              │    ├─ config/             # Configurações gerais (Swagger, CORS)&#10;     │              │    │    └─ SwaggerConfig.java&#10;     │              │    └─ util/               # Funções utilitárias&#10;     │              │         └─ DateUtils.java&#10;     │              │&#10;     │              ├─ auth/                    # Autenticação e autorização&#10;     │              │    ├─ AuthController.java&#10;     │              │    ├─ AuthService.java&#10;     │              │    ├─ JwtUtil.java&#10;     │              │    └─ UserDetailsServiceImpl.java&#10;     │              │&#10;     │              └─ Application.java         # Classe principal Spring Boot&#10;     │&#10;     └─ resources/&#10;          ├─ application.yml                   # Configurações da aplicação&#10;          └─ db/&#10;               └─ migrations/                  # Scripts de banco (Liquibase)&#10;```&#10;---&#10;&#10;## Contato&#10;&#10;Ailton José Martins — [https://ailtonjm.com.br](https://ailtonjm.com.br)&#10;" />
              <option name="updatedContent" value="# ERP Simplificado — Backend (Java + Spring Boot)&#10;&#10;Projeto de estudo para desenvolvimento de um **Sistema ERP Simplificado**, com foco em gestão de clientes, produtos, estoque e pedidos.&#10;&#10;Projeto FRONT do ERP — **[EM BREVE]**&#10;&#10;## ‍ Tecnologias Utilizadas&#10;- Java 21+&#10;- Spring Boot ( 3.5.4 )&#10;- Spring Data JPA (Hibernate)&#10;- Spring Security (JWT)&#10;- PostgreSQL&#10;- Lombok&#10;- Mapstruct&#10;- Liquibase (Migrations)&#10;- Docker&#10;- JUnit 5 + Mockito (Testes)&#10;- Swagger / OpenAPI 3.0&#10;&#10;##  Funcionalidades do Projeto&#10;- Cadastro de Clientes&#10;- Cadastro de Produtos&#10;- Controle de Estoque&#10;- Emissão de Pedidos/Vendas&#10;- Relatórios Simples (PDF ou Excel)&#10;- Autenticação e Autorização de Usuários (Role-based)&#10;&#10;##  Roadmap (Tasks)&#10;### ️ Estrutura Inicial&#10;- [ ] Configurar projeto Spring Boot (Gradle)&#10;- [ ] Docker para base de dados teste &#10;- [ ] Configurar conexão com banco de dados (application.yml e application-dev.yml)&#10;- [ ] Configurar Lombok e Flyway&#10;- [ ] Estruturar pacotes do projeto (Controller, Service, Repository, Model, DTO)&#10;&#10;### ️ Módulo: Clientes&#10;- [ ] Criar entidade Cliente (Model)&#10;- [ ] Criar Repository Cliente (JpaRepository)&#10;- [ ] Criar Service Cliente (CRUD)&#10;- [ ] Criar Controller Cliente (API REST)&#10;- [ ] Implementar validações (Bean Validation)&#10;- [ ] Testes unitários (Service/Repository)&#10;&#10;### ️ Módulo: Produtos&#10;- [ ] Criar entidade Produto (Model)&#10;- [ ] Criar Repository Produto (JpaRepository)&#10;- [ ] Criar Service Produto (CRUD)&#10;- [ ] Criar Controller Produto (API REST)&#10;- [ ] Testes unitários (Service/Repository)&#10;&#10;###  Módulo: Estoque&#10;- [ ] Relacionar Produto com Estoque (OneToOne ou Embutido)&#10;- [ ] Criar operações de Entrada/Saída de Estoque&#10;- [ ] API para consulta de saldo de estoque&#10;&#10;###  Módulo: Pedidos/Vendas&#10;- [ ] Criar entidade Pedido e ItemPedido&#10;- [ ] Implementar lógica de geração de Pedido (relacionar Cliente + Itens)&#10;- [ ] Atualizar Estoque ao concluir Pedido&#10;- [ ] API de Listagem e Consulta de Pedidos&#10;&#10;###  Segurança (Auth)&#10;- [ ] Configurar Spring Security (JWT)&#10;- [ ] Criar roles de acesso (ADMIN, USER)&#10;- [ ] API de login/logout&#10;&#10;###  Relatórios&#10;- [ ] Gerar relatório simples em PDF (Ex: Vendas por Período)&#10;- [ ] Exportar dados em Excel (opcional)&#10;&#10;###  Testes&#10;- [ ] Testes unitários (Service, Repository)&#10;- [ ] Testes de Integração (Controller)&#10;&#10;###  Deploy &#10;- [ ] Dockerizar aplicação &#10;- [ ] Deploy na minha VPN ( https://ailtonjm.com.br ) usando Actions do Github&#10;&#10;---&#10;&#10;## ️ Boas Práticas de Desenvolvimento (Análise e Aplicação)&#10;Após a implementação das funcionalidades básicas, será realizada uma etapa dedicada à análise crítica do projeto, focada em aplicar as melhores práticas de desenvolvimento Java &amp; Spring Boot.&#10;&#10;### Objetivos:&#10;- Revisar a estrutura de pacotes (Domain-Driven Design Light)&#10;- Garantir separação correta de camadas (Controller, Service, Repository, DTO, Mapper)&#10;- Refatorar códigos duplicados ou mal estruturados&#10;- Implementar princípios SOLID&#10;- Utilizar padrões de projeto (ex: Factory, Strategy, Adapter se fizer sentido)&#10;- Melhorar manutenibilidade e legibilidade do código&#10;- Garantir boas práticas de nomenclatura&#10;- Aplicar boas práticas no versionamento de banco de dados (Flyway)&#10;- Implementar testes de qualidade (unitários/integrados)&#10;- Melhorar tratamento de exceções (GlobalExceptionHandler)&#10;- Configurar um ambiente de logs adequado (Logback/Slf4j)&#10;- Preparar para deploy em ambiente de produção (perfis de ambiente)&#10;&#10;### Tarefas&#10;- [ ] Revisar estrutura de pacotes seguindo uma abordagem orientada ao domínio&#10;- [ ] Aplicar princípios SOLID nas classes Service e Controller&#10;- [ ] Identificar e eliminar código duplicado&#10;- [ ] Implementar padrões de projeto onde aplicável&#10;- [ ] Refatorar DTOs para evitar exposição direta de entidades&#10;- [ ] Criar um Handler Global de Exceções (ControllerAdvice)&#10;- [ ] Configurar perfis de ambiente (dev, prod)&#10;- [ ] Implementar logs de forma estruturada (Slf4j/Logback)&#10;- [ ] Escrever testes de unidade/integrados para fluxos críticos&#10;- [ ] Analisar possíveis otimizações de queries (JPA/Hibernate)&#10;- [ ] Documentar a API com Swagger/OpenAPI 3.0 (anotado e com exemplos)&#10;&#10;&#10;## Estrutura Completa de Pastas&#10;&#10;```markdown&#10;src/&#10; └─ main/&#10;     ├─ java/&#10;     │    └─ com/&#10;     │         └─ projeto/erp/&#10;     │              ├─ cliente/                 # Domínio Cliente&#10;     │              │    ├─ dto/                  # DTOs do Cliente (request/response)&#10;     │              │    │    ├─ ClienteRequestDTO.java&#10;     │              │    │    └─ ClienteResponseDTO.java&#10;     │              │    ├─ mapper/              # Mappers para Cliente&#10;     │              │    │    └─ ClienteMapper.java&#10;     │              │    ├─ Cliente.java         # Entidade Cliente&#10;     │              │    ├─ ClienteRepository.java   # Interface do Repositório&#10;     │              │    ├─ ClienteService.java  # Regras de negócio&#10;     │              │    └─ ClienteController.java  # API REST&#10;     │              │&#10;     │              ├─ produto/                 # Domínio Produto&#10;     │              │    ├─ dto/&#10;     │              │    │    ├─ ProdutoRequestDTO.java&#10;     │              │    │    └─ ProdutoResponseDTO.java&#10;     │              │    ├─ mapper/&#10;     │              │    │    └─ ProdutoMapper.java&#10;     │              │    ├─ Produto.java&#10;     │              │    ├─ ProdutoRepository.java&#10;     │              │    ├─ ProdutoService.java&#10;     │              │    └─ ProdutoController.java&#10;     │              │&#10;     │              ├─ pedido/                  # Domínio Pedido&#10;     │              │    ├─ dto/&#10;     │              │    │    ├─ PedidoRequestDTO.java&#10;     │              │    │    └─ PedidoResponseDTO.java&#10;     │              │    ├─ mapper/&#10;     │              │    │    └─ PedidoMapper.java&#10;     │              │    ├─ Pedido.java&#10;     │              │    ├─ ItemPedido.java&#10;     │              │    ├─ PedidoRepository.java&#10;     │              │    ├─ PedidoService.java&#10;     │              │    └─ PedidoController.java&#10;     │              │&#10;     │              ├─ infrastructure/          # Camada de infraestrutura&#10;     │              │    ├─ persistence/        # Implementação concreta dos repositórios&#10;     │              │    │    ├─ ClienteRepositoryImpl.java&#10;     │              │    │    ├─ ProdutoRepositoryImpl.java&#10;     │              │    │    └─ PedidoRepositoryImpl.java&#10;     │              │    ├─ messaging/          # Integrações com filas, Kafka etc.&#10;     │              │    ├─ external/           # APIs externas, clients REST, SOAP etc.&#10;     │              │    └─ configuration/      # Datasource, cache, configs de infra&#10;     │              │&#10;     │              ├─ common/                  # Código genérico e transversal&#10;     │              │    ├─ exception/          # Exceções customizadas e handlers&#10;     │              │    │    ├─ BusinessException.java&#10;     │              │    │    ├─ ResourceNotFoundException.java&#10;     │              │    │    └─ GlobalExceptionHandler.java&#10;     │              │    ├─ config/             # Configurações gerais (Swagger, CORS)&#10;     │              │    │    └─ SwaggerConfig.java&#10;     │              │    └─ util/               # Funções utilitárias&#10;     │              │         └─ DateUtils.java&#10;     │              │&#10;     │              ├─ auth/                    # Autenticação e autorização&#10;     │              │    ├─ AuthController.java&#10;     │              │    ├─ AuthService.java&#10;     │              │    ├─ JwtUtil.java&#10;     │              │    └─ UserDetailsServiceImpl.java&#10;     │              │&#10;     │              └─ Application.java         # Classe principal Spring Boot&#10;     │&#10;     └─ resources/&#10;          ├─ application.yml                   # Configurações da aplicação&#10;          └─ db/&#10;               └─ migrations/                  # Scripts de banco (Liquibase)&#10;```&#10;---&#10;&#10;## Contato&#10;&#10;Ailton José Martins — [https://ailtonjm.com.br](https://ailtonjm.com.br)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/controller/UserController.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/controller/UserController.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/dto/UserDTO.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/dto/UserDTO.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/User.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/User.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/repository/UserRepository.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/repository/UserRepository.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/UserService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/UserService.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>